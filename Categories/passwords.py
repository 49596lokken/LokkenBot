import discord
from discord.ext import commands
import random


class Useful(commands.Cog):
    def __init__(self, bot):
        self.bot=bot
        self.password_characters = [chr(i) for i in range(33,127)]


    @commands.group(pass_context=True,invoke_without_command=True,description="**Password Manager for LokkenBot.**\n\nI never store the passwords in plaintext but the encryption is easy to break.\nUse this at your own risk!\nYou will need to remember 4 numbers which will be used to encrypt and decrypt your passwords. Without the correct numbers, the username and password will be random\nI take no responsibity for ANY passwords which are leaked from here.\nUse in DMs (duh)\n Don't use spaces in usernames or site names")
    async def pwd(self, ctx):
        ...

    @pwd.command(description="Adds a password - passwords are randomly generated by the bot and contain lots of types of characters")
    async def new(self,ctx, site, username, password_length: int, num1: int, num2: int, num3: int, num4: int):
        if ctx.guild:
            await ctx.send("You probably shouldn't have used that here... I hope you didn't use those numbers anywhere else")
        try:
            f=open(f"data/passwords/{ctx.author.id}", "a")
        except FileNotFoundError:
            f = open(f"data/passwords/{ctx.author.id}", "w")
        output = f"{site} "
        for i in range(len(username)):
            output += self.password_characters[(num2-(i*num1+self.password_characters.index(username[i])))%len(self.password_characters)]
        output += " "
        for i in range(password_length):
            output += self.password_characters[(num4-(i*num3+self.password_characters.index(random.choice(self.password_characters))))%len(self.password_characters)]
        f.write(output+"\n")
        f.close()

    @pwd.command(description="Shows you your passwords")
    async def view(self, ctx, num1: int, num2: int, num3: int, num4: int):
        f = open(f"data/passwords/{ctx.author.id}", "r")
        all_passwords = f.read().split("\n")
        output = ""
        for website in all_passwords:
            if not website:
                break
            output += website[:website.index(" ")] + " - "
            website = website[website.index(" ")+1:]
            username = website[:website.index(" ")]
            for i in range(len(username)):
                output += self.password_characters[(num2-(i*num1+self.password_characters.index(username[i])))%len(self.password_characters)]
            website = website[website.index(" ")+1:]
            output += " - "
            for i in range(len(website)):
                output += self.password_characters[(num2-(i*num1+self.password_characters.index(website[i])))%len(self.password_characters)]
            output += "\n"
        if output:
            await ctx.author.send(output)


def setup(bot):
    bot.add_cog(Useful(bot))